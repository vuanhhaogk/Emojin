let data = {
  'Happy': [
    '【ツ】', '㋡', '(ツ)', '【シ】', '㋛', '(シ)', '\_(シ)_/', '(´ツ｀)', '（ツ）ノ', '¯\_(ツ)_/¯', '└㋡┘', '╘㋡╛', '٩㋡۶', '( ＾◡＾)っ', '^o^', '^.^', 'ᵔ_ᵔ', '┏(＾0＾)┛┗(＾0＾)┓', 'ت', 'ټ', '≧◡≦', 'ᵔᴥᵔ', '(°⌣°)', '٩(^‿^)۶', '٩(●̮̮̃•̃)۶', '٩(-̮̮̃-̃)۶', '٩(͡๏̮͡๏)۶', '(•‿•)', 'ó‿ó', '٩◔‿◔۶', 'ಠ◡ಠ', '●‿●', '( \'‿\' )', '^‿^', '(｡◕‿◕｡)', '┌( ಠ‿ಠ)┘', '◉◡◉', '(˘◡˘)', '(^^,)', '◔◡◉', '⊂◉‿◉つ', 'ʕʘ‿ʘʔ', '＼(^-^)／', 'ﾍ(￣▽￣*)ﾉ', 'ヽ(^◇^*)/', '♪ヽ(´▽｀)ノ', 'ヾ(*´∀｀*）ノ', 'ヽ(〃＾▽＾〃)ﾉ', 'ヽ(ﾟ▽ﾟ*)乂(*ﾟ▽ﾟ)ﾉ', '♪＼(*＾▽＾*)／＼(*＾▽＾*)／', '＼（＾○＾）人（＾○＾）／', 'ヾ(＾▽＾)ﾉ', '(´ᗢ｀)', '\,,/(^_^)\,,/', 'ۜ\(סּںסּَ` )/ۜ ', '(ˆڡˆ)', 'ヅ', 'ツ', 'ッ', 'シ', '(ﾟヮﾟ)', '(´ー`)', '(´▽`)', '☯‿☯', '(ﾟーﾟ)', '\(• ◡ •)/', '\( ﾟ◡ﾟ)/', '(✌ﾟ∀ﾟ)☞', '◎ܫ◎', '◙‿◙', '（=^_^=）', '(=^｡^=)', '《≡^o^》', '凸(¬◡¬)凸', '(◦\'⌣\'◦)', '٩(*❛⊰❛)۶', '( ͡° ᴥ ͡°)', '☺✌', '( ͡° ͜ʖ ͡°)', '( ͜。 ͡ʖ ͜。)', ' ✌(｀ε´ )', '(◟ᅇ)◜', '(＊☉౪ ⊙｡)ﾉ', '(っ˘ڡ˘ς)', '(\'\'`▽´)-σ ', '┐(・。・┐) ♪ ', 'ƪ(ړײ)‎ƪ​​ ', '(ʃƪ˘ڡ˘) ', '(ʃƪˆ▿ˆ) ', 'ヽ༼ຈل͜ຈ༽ﾉ', '( ͡ᶢ ͜ʖ ͡ᶢ)', '٩༼❦‿❦༽۶', '(/0_0)/'
  ],
  'Cute': [
    '(ღ˘◡˘ღ)', '✿◕ ‿ ◕✿', '(✿◠‿◠)', '(◕‿◕✿)', '☾˙❀‿❀˙☽', '(◡‿◡✿)', '✿ܓ', '❀ܓ', '◤(¬‿¬)◥', '❤‿❤', '♥‿♥', 'ლ(╹◡╹ლ)', '(｡´‿｀♡)', '(°◡°♡).:｡', '❀‿❀', '(´∀｀)♡', '（*´▽｀*）', '（●´∀｀）ノ♡', '♡＾▽＾♡', '(づ｡◕‿◕｡)づ', '(｡-_-｡ )人( ｡-_-｡)', '♡o｡.(✿ฺ｡ ✿ฺ)', '(づ￣ ³￣)づ', '(ღ˘⌣˘ღ)', '(︶ε︶メ)', '(｡･_･｡)', '(/◔ ◡ ◔)/', 'ღ◕‿◕｡', '｡◕‿◕ღ', '◡‿◡✿', '╮(︶ε︶メ)╭', '유♥웃 ℒℴνℯ ヾ(✿❛◡❛)ノ', '(~˘з˘)~~(˘ε˘~)', 'ღ(◕ ᴥ ◕)', '(з˘⌣˘ε)', '( ˘з˘)ε˘`)', '(っ˘з(O.O )♥', '(っ◔◡◔)っ', '( ￣ﾉ∇￣)￣ｰ￣)', '(`˘з(•˘⌣˘•) ', '(っ˘з(˘⌣˘ ) ', '♥(ˆ⌣ˆԅ) ', '༼ つ ◕_◕ ༽つ', '(Ɔ ˘⌣˘)♥(˘⌣˘ C)'
  ],
  'Mad': [
    "¯¯̿̿¯̿̿'̿̿̿̿̿̿̿'̿̿'̿̿̿̿̿'̿̿̿)͇̿̿)̿̿̿̿ '̿̿̿̿̿̿\̵͇̿̿\=(•̪̀●́)=o/̵͇̿̿/'̿̿ ̿ ̿̿ ", 'òÓ', '(òÓ,)_\,,/', '(ノ`Д ́)ノ', 'ლ(ಠ益ಠლ)', '┌∩┐(◣_◢)┌∩┐', '>_<', '~_~', '>.<', 'Ծ_Ծ', '(ﾉಥ益ಥ）ﾉ', '~̯~', '(►.◄)', "̿' ̿'\̵͇̿̿\з=(◕_◕)=ε/̵͇̿̿/'̿'̿ ̿", 'ಠ_ಠ', '॓_॔', 'ヽ(｀Д´)ﾉ', '(•̪●)=ε/̵͇̿̿/’̿’̿ ̿ ̿̿ ̿ ̿”” ', 'ఠ_ఠ', 'ಠ╭╮ಠ', '⋋_⋌', '〴⋋_⋌〵', 'ಠ益ಠ', '(ノ≥∇≤)ノ', 'щ（ﾟДﾟщ）', '≖_≖', "̿’ ̿’\̵͇̿̿\з=(•̪●)=ε/̵͇̿̿/’̿’̿ ", '⇎_⇎', 'ಠ︵ಠ凸', '┌∩┐(&gt;_&lt;)┌∩┐', '{{{(>_<)}}}', '◣_◢', '( ˘˘̯ )', '͡ °_̯͡°', '（*¬ ̯ ◡）づ', 'ᕙ(⇀ ̯↼“)ᕗ', '( ͠° ͟ʖ ͡°) ', "̿̿ ̿̿ ̿̿ ̿'̿'\̵͇̿̿\з=( ͠° ͟ʖ ͡°)=ε/̵͇̿̿/'̿̿ ̿ ̿ ̿ ̿ ̿ ", '(س ͠° ͟ʖ ͡°)س', '( ͡° ʖ̯ ͡°)', '٩(`^´)۶', '（◣▃◢）', '(•ˋ _ ˊ•)', 'ヽ(#｀_つ´)ﾉﾌﾟ', '(☄ฺ◣д◢)☄ฺ', '╰(◣﹏◢)╯ ', "ƪ(`▿▿▿▿´ƪ) "
  ],
  'Sad': [
    '(๏̯๏)', '(´ᗣ｀)', '(╯︵╰,)', '(╥﹏╥)', 'Y_Y', 'ó_ò', 'v(ಥ ̯ ಥ)v', '◔̯◔', '（ ´_⊃｀）', 'ಥ_ಥ', 'v_v', '( \'︵\' )', '(///.-)', '٩(͡๏̯͡๏)۶', 'óò', '(͡๏̯͡๏)', '(๏̯͡๏﴿', '⊙︿⊙', '◕︵◕', '●︵•', '◉︵◉', 'ಢ_ಢ', 'ಢ_ಥ', '(///_ಥ)', 'ಸ_ಸ', 'ಹ_ಹ', 'ộ_ộ', '(•̪●)', '（Φ_Φ）', '<{Φ_Φ}>', '╮("╯_╰)╭', '( ͡° ʖ ̯ ͡°)', '(´._.`) ', '(´Oƪ) ', '╰დ╮╭დ╯', '(ლ‸－)', '(－‸ლ)'
  ],
  'Surprised': [
    '(º_•)', '(º.º)', '⊙▃⊙', 'O.o', '⊙_⊙', '●_●', '(⊙̃.o)', '(⊙.◎)', '๏_๏', '(˚-˚)', '˚o˚', '••', 'Oo', 'õ.O', '(O.O)', '⊙_ʘ', '( ﾟoﾟ)', '˚▱˚', '(ﾟ＊ﾟ)', '◉_◉', '【•】_【•】', '╚(•⌂•)╝', 'ⓧ_ⓧ', 'ಠ , ಥ', '(•ิ_•)', '<(o_o)>', '(⊗_⊙)', '(⊙…⊙)', '(◐ o ◑ )', '(⊙_◎)', '͡๏_͡๏', '(○̮̮̃•̃)?', '⊂(ô｡◎彡)', '⊙⊙', '･｡･'
  ],
  'Confused': [
    '(°~°)', '^^\'', 'é_è', '°﹏°', '(°﹏°)', '˚﹏˚', '¯\(°_o)/¯', '⊙﹏⊙', '(ΘεΘ;)', '(˚ㄥ_˚)', '(⊙﹏⊙)', '(ʚ_ʚ)', '(◑﹏◐)', '(⊛﹏⊛)', '(*\'﹏\'*)', '(*´﹏｀*)', '＼(〃＾﹏＾〃)／', '(¬_¬")', '(; ͡°_ʖ ͡°)', '(´•_•`)', '(ˇ_ˇ’!l)'
  ],
  'Table Flipping': [
    '(╯°□°）╯︵ ┻━┻', '(ﾉಥ益ಥ）ﾉ﻿ ┻━┻', '┻━┻ ︵ヽ(`Д´)ﾉ︵﻿ ┻━┻', '┬─┬ノ( º _ ºノ)', '(ノಠ益ಠ)ノ彡┻━┻', '┬──┬﻿ ¯\_(ツ)', '┻━┻ ︵﻿ ¯\(ツ)/¯ ︵ ┻━┻', '(╯°□°)╯︵ ┻━┻ ︵ ╯(°□° ╯)', '(╯°Д°）╯︵ /(.□ . \)', '(/¯◡ ‿ ◡)/¯ ~ ┻━┻', '(ノ^_^)ノ┻━┻ ┬─┬ ノ( ^_^ノ)', '(/ .□.)\ ︵╰(゜Д゜)╯︵ /(.□. \)', '（╯°□°）╯︵ ┻━┻', '（╯°□°）╯︵ ( ͜。 ͡ʖ ͜。)'
  ],
  'Animal': [
    'Ƹ̵̡Ӝ̵̨̄Ʒ', '¸.·´¯`·.¸¸.·´¯`·.¸><(((º>', 'ˁ˚ᴥ˚ˀ', '~(‾▿‾)~', '^⨀ᴥ⨀^', '=^..^=', '<:3 )~~~', '~~(__^·>', '^ⱷᴥⱷ^', '~=[,,_,,]:3', '(=^ェ^=)', 'ʕ•ᴥ•ʔ', '\/╲\/\\╭ºoꍘoº╮\/\\╱\\', '(\\\/) (°,,°) (\\\/)', '\/\/\/\\oo\/\\\\\\', '(ʳ ´º㉨º)'
  ],
  'Miscellaneous': [
    '＿（ッ）&gt;＿\/／', 'ー（ッ）」', '＿（ッ）へ', '(少)っ', '＼(＾o＾)／', '（·人·）', '(⌐■_■)', '♫♪.ılılıll|̲̅̅●̲̅̅|̲̅̅=̲̅̅|̲̅̅●̲̅̅|llılılı.♫♪', '︻╦╤─', '__̴ı̴̴̡̡̡ ̡͌l̡̡̡ ̡͌l̡*̡̡ ̴̡ı̴̴̡ ̡̡͡|̲̲̲͡͡͡ ̲▫̲͡ ̲̲̲͡͡π̲̲͡͡ ̲̲͡▫̲̲͡͡ ̲|̡̡̡ ̡ ̴̡ı̴̡̡ ̡͌l̡̡̡̡.___', '(-(-_(-_-)_-)-)', '(̲̅:̲̅:̲̅:̲̅(̲̅(̲̅ ̲̅ ̲̅ ̲̅ ̲̅ ̲̅ ̲̅ ̲̅ ̲̅ ̲̅ ̲̅()ڪ', '|̲̲̲͡͡͡ ̲▫̲͡ ̲̲̲͡͡π̲̲͡͡ ̲̲͡▫̲̲͡͡ ̲|̡̡̡ ̡ ̴̡ı̴̡̡ ̡͌l̡ ̴̡ı̴̴̡ ̡l̡*̡̡ ̴̡ı̴̴̡ ̡̡͡|̲̲̲͡͡͡ ̲▫̲͡ ̲̲̲͡͡π̲̲͡͡ ̲̲͡▫̲̲͡͡ |', '┣▇▇▇═─', '( ̲̅:̲̅:̲̅:̲̅[̲̅ ̲̅]̲̅:̲̅:̲̅:̲̅ )', '»-(¯`·.·´¯)->', 'd-_-b', '|̲̅$̲̅(̲̅2̲̅o̲̅o̲̅)̲̅$̲̅|', '[̲̅$̲̅(̲̅5̲̅)̲̅$̲̅]', '[̲̅$̲̅(̲̅1̲̅)̲̅$̲̅]', "︻╦̵̵͇̿̿̿̿╤──", 'c[_]', '( ;,;)', 'ಠ_ರೃ', 'ಠ_ృ', 'ヘ(◕。◕ヘ)', '☼_☼', '♨_♨', '¬_¬', 'ლ(ಠ_ಠ ლ)', '໖_໖', '◘_◘ ', '(｡◕‿-｡)', '(⊙‿⊝)', '(｡◕‿⊝｡)', '（・ι・）', '＼(・_・ )', '( ・_・)／', '（ミ◕‿◕ミ）', '（°ο°）~ @', '__̴ı̴̴̡̡̡ ̡͌l̡̡̡ ̡͌l̡*̡̡ ̴̡ı̴̴̡ ̡̡͡|̲̲̲͡͡͡ ̲▫̲͡ ̲̲̲͡͡π̲̲͡͡ ̲̲͡▫̲̲͡͡ ̲|̡̡̡ ̡ ̴̡ı̴̡̡ ̡͌l̡̡̡̡', "(_̅_̲̲̲̲̲̅̅̅̅̅̅̅(̅_̅_̲̅м̲̅a̲̅я̲̅l̲̅j̲u̲̅an̲̅a̲̅̅_̅_̅_̅()~~", '¨°º¤ø„¸¸„ø¤º°',  '웃웃웃 vs 웃웃웃', '✈ ✈ ———- ♒✈', "٩๏̯͡๏)۶ ¯¯¯̿̿¯̿̿’̿̿̿̿̿̿̿’̿̿’̿̿̿̿̿’̿̿̿)͇̿̿)̿̿̿̿ ‘̿̿̿̿̿̿\̵͇̿̿\٩(̾●̮̮̃̾•̃̾)", '__̴ı̴̴̡̡̡ ̡͌l̡̡̡ ̡͌l̡*̡̡ ̴̡ı̴̴̡ ̡̡͡|̲̲̲͡͡͡ ̲▫̲͡ ̲̲̲͡͡π̲̲͡͡ ̲̲͡▫̲̲͡͡ ̲|̡̡̡_______', '.°☆ ‧°‧°☆∴° ☆ ¤º…`•.¸.•´ ☆™', 'L٥ﻻﻉ√٥υ F٥г\'ﻉ√ﻉг', '●±‡±● (name) ●±‡±●', '(_8(|)', '☼̡̡̡ ̴̡ı̴̴̡ ̡̡͡|̲̲̲͡͡͡ ̲̲̲͡͡͡ ̲▫̲͡ ̲̲̲͡͡π̲̲͡͡ ̲̲͡▫̲̲|̡̡̡', '__̴ı̴̴̡̡̡ ̡͌l̡̡̡ ̡͌l̡*̡̡ ̴̡ı̴̴̡ ̡̡͡|̲̲̲͡͡͡ ̲▫̲͡ ̲̲̲͡͡π̲̲͡͡ ̲̲͡▫̲̲͡͡ ̲|̡̡̡ ̡', 'l̡̡̡ ̡͌l̡*̡̡ ̴̡ı̴̴̡ ̡̡͡|̲̲̲͡͡͡ ̲▫̲͡ ̲̲̲͡͡π̲̲͡͡ ̲̲͡▫̲̲͡͡ ̲|̡̡̡ ̡ ̴̡ı̴̡̡ ̡͌l̡̡̡̡.__', '_,,,_o( ͡° ͜ʖ ͡°)o_\/\'\'\/_', "_,,,_(((^L_*)))_/''/_", '(˘▿˘)--c< • )( • )', '.-☆-._.-★-._.-★', 'ᕕ(´ ▿` ∗)ᕗ', '( •_•)_†', '( •_•) ( •_•) ⌐■-■ (⌐■_■)', '(̲̅:̲̅:̲̅:̲̅(̲̅(̲̅ ̲̅ ̲̅ ̲̅ ̲̅ ̲̅ ̲̅ ̲̅☠̲̅ ̲̅ ̲̅ ̲̅ ̲̅ ̲̅ ̲̅()ڪ', '( ͡-_ʖ ͡-)', '(⌐■̅_̅■)', '( •_•) <) )╯', '＼＼٩(＾o＾ )و \/\/／／', '(*・_・)ノ⌒*﻿', '†_(ﾟｰﾟ*)β', '(･_･;)_･)', 'ᕕ（´°.°`）ᕗ', '٩(´0ˆ)/ ', '( ˘˘з)♬♪ ', '(⌐○̅_̅○)', '(∩｀-´ )⊃━☆ﾟ.*･｡ﾟ'
  ],
  'About': [
    '__̴ı̴̴̡̡̡ ̡͌l̡̡̡ ̡͌l̡*̡̡ ̴̡ı̴̴̡ ̡̡͡|̲̲̲͡͡͡ ̲▫̲͡ ̲̲̲͡͡π̲̲͡͡ ̲̲͡▫̲̲͡͡ ̲|̡̡̡ ̡ ̴̡ı̴̡̡ ̡͌l̡̡̡̡.___', 'Emojin - Version 1.0', 'Dev: Vu Anh Hao', 'https://vuanhhaogk.github.io', 'ﾍ(￣▽￣*)ﾉ '
  ]
}

let cat_list = document.getElementById('cat-list')
let cat_content = document.getElementById('cat-content')
let is_first = true

for (let name in data){
  let cat = data[name]
  let cat_button = document.createElement('button')
  cat_button.innerHTML = name
  cat_list.appendChild(cat_button)

  let cat_group = document.createElement('div')
  cat_group.className = 'group'
  cat_content.appendChild(cat_group)

  if (is_first){
    cat_group.setAttribute('active', 'true')
    cat_button.setAttribute('active', 'true')
    is_first = false
  }

  cat_button.onclick = () => {
    cat_content.querySelector('.group[active=true]').setAttribute('active', 'false')
    cat_list.querySelector('button[active=true]').setAttribute('active', 'false')

    cat_group.setAttribute('active', 'true')
    cat_button.setAttribute('active', 'true')

    cat_content.scrollTop = 0
  }

  for (let emoti of cat){
    let item = document.createElement('button')
    item.className = 'item btn'
    item.innerHTML = emoti
    item.setAttribute('data-clipboard-text', emoti)
    cat_group.appendChild(item)
  }
}

(new Clipboard('.btn')).on('success', () => {
    let success = document.getElementById('success')
    success.style.display = 'flex'

    setTimeout(() => {
      success.style.display = 'none'
    }, 1000)
})